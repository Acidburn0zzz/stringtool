{"version":3,"sources":["RadixConverter.js","App.js","registerServiceWorker.js","index.js"],"names":["RadixConverter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","edit","bind","assertThisInitialized","addRef","setHover","undefined","radix","radixName","description","children","memoizeInputProp","memoizeOne","input","prevHover","prevSelect","setState","convert","state","newProps","select","classList","remove","add","hover","numbers","to","_this2","map","digit","isNaN","convertBase","String","fromCharCode","digits","dec2utf8","Array","number","toString","padStart","join","NaN","key","onHover","event","onSelect","selection","getSelection","range","document","createRange","selectNodeContents","target","removeAllRanges","addRange","onEdit","UTF8","split","element","_this3","react_default","a","createElement","reactstrap_es","body","className","size","color","onClick","href","ref","onMouseEnter","onMouseLeave","unhover","from","codetable","parseInt","length","remainder","push","reverse","out","toUpperCase","i","val","indexOf","Math","pow","Component","App","calculate","string","stringArr","dark","App_StringEditor","App_RadixContainer","bases","StringEditor","changeHandler","delimeter","regex","updateRadix","updateString","getDelimeterEditor","nextProps","prevProps","name","value","id","RegExp","char","charCodeAt","selectionStart","selectionEnd","_this4","delimeterDisplay","delimeterText","react","lg","md","addonType","outline","active","placeholder","onChange","type","spellCheck","onFocus","selectAll","autoFocus","RadixContainer","_this5","instances","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","setSelect","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","inst","_this6","src_RadixConverter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.44284138.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Button, Card, CardText, CardTitle\n} from \"reactstrap\";\n\nimport memoizeOne from 'memoize-one';\n\nclass RadixConverter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.edit = this.edit.bind(this);\n    this.addRef = this.addRef.bind(this);\n    this.setHover = this.setHover.bind(this);\n\n    if (props.radix !== undefined) {\n      this.radix = ~~props.radix;\n    } else {\n      this.radix = 10;\n    }\n\n    if (this.radix === -1) {\n      this.radixName = \"UTF-8\";\n      this.description = \"Translation of binary Unicode code points\"\n    } else if (this.radix === 0) {\n      this.radixName = \"Text\"\n    } else if (this.radix === 2) {\n      this.radixName = \"Binary\";\n    } else if (this.radix === 8) {\n      this.radixName = \"Octal\";\n    } else if (this.radix === 10) {\n      this.radixName = \"Decimal\";\n    } else if (this.radix === 16) {\n      this.radixName = \"Hexadecimal\";\n    }\n\n    this.children = [];\n\n    this.memoizeInputProp = memoizeOne((input) => {\n      this.prevHover = -1;\n      this.prevSelect = -1;\n      this.setState({ input: this.convert(input, this.radix) })\n    });\n\n    this.state = {\n      input: this.convert(props.input || [], this.radix)\n    };\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.memoizeInputProp(newProps.input);\n  }\n\n  setSelect(select) {\n    if (this.prevSelect !== -1) {\n      this.children[this.prevSelect].classList.remove(\"select\");\n      this.prevSelect = -1;\n    }\n\n    if (select !== -1) {\n      this.prevSelect = select;\n      this.children[select].classList.add(\"select\");\n    }\n  }\n\n  setHover(hover) {\n    if (this.prevHover !== -1) {\n      this.children[this.prevHover].classList.remove(\"hover\");\n      this.prevHover = -1;\n    }\n    \n    if (hover !== -1) {\n      this.prevHover = hover;\n      this.children[hover].classList.add(\"hover\");\n    }\n  }\n\n  convert(numbers, to) {\n    return numbers.map(digit => {\n      if (typeof digit === \"number\" && isNaN(digit))\n        return \"NaN\";\n      else if (to > 0)\n        return RadixConverter.convertBase(digit, 10, to)\n      else if (to === 0)\n        return String.fromCharCode(digit);\n      else if (to === -1) {\n        let digits = this.dec2utf8(digit);\n\n        if (digits instanceof Array)\n          return digits.map(number => number.toString(2).padStart(8, \"0\")).join(\" \");\n        else\n          return \"NaN\";\n      }\n\n      return \"NaN\";\n    })\n  }\n  // lot of research and tinkering went into this shit.., for a performance gain of about 60%\n  // but it was still rewarding\n  dec2utf8(number) {\n    if (isNaN(number) || number < 0)\n      return NaN;\n    else if (number < 0x80) // 7 bits or less\n      return [number];\n    else if (number < 0x800) // 11 bits or less\n      return [((number >> 6) & 0x3f) | 0xc0, (number & 0x3f) | 0x80];\n    else if (number < 0x10000) // 16 bits or less\n      return [((number >> 12) & 0x3f) | 0xe0, ((number >> 6) & 0x3f) | 0x80, (number & 0x3f) | 0x80];\n    else if (number < 0x200000) // 21 bits or less\n      return [((number >> 18) & 0x3f) | 0xf0, ((number >> 12) & 0x3f) | 0x80, ((number >> 6) & 0x3f) | 0x80, (number & 0x3f) | 0x80];\n    else\n      return NaN;\n  }\n\n  static convertBase(number, from, to) {\n    const codetable = [\n      \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", // Using an array here makes this function\n      \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", // nearly 60% faster than a string\n      \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", // at least for binary values.\n      \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n    ];\n\n    if (isNaN(number) && typeof number === \"number\") return NaN;\n\n    if (from === 10) {\n      number = parseInt(number, 10);\n\n      if (to === 10) return number;\n      if (codetable.length < to || number < 0) return NaN;\n\n      let digits = [];\n\n      do {\n        let remainder = number % to;\n        digits.push(codetable[remainder]);\n        number = (number - remainder) / to;\n      } while (number !== 0)\n\n      return digits.reverse().join(\"\");\n    } else if (to === 10) {\n      let out = 0;\n\n      if (from > 10) number = number.toUpperCase(); //try not to perform this needlessly\n\n      for (let i = number.length - 1; i !== -1; i--) {\n        let val = codetable.indexOf(number[i]);\n        if (val === -1 || val > from) return NaN;\n        out += val * (from ** (number.length - i - 1));\n      }\n\n      return out;\n    } else {\n      return RadixConverter.convertBase(RadixConverter.convertBase(number, from, 10), 10, to);\n    }\n  }\n\n  hover(key) {\n    if (this.props.onHover)\n      this.props.onHover(key);\n\n  }\n\n  unhover(key) {\n    if (key === this.prevHover)\n      this.hover(-1);\n  }\n\n  select(key, event) {\n    if (this.props.onSelect) {\n      if (key === this.prevSelect)\n        this.props.onSelect(-1);\n      else\n        this.props.onSelect(key);\n\n    }\n\n    let selection = getSelection();\n    let range = document.createRange();\n\n    range.selectNodeContents(event.target);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n\n  edit() {\n    if (this.props.onEdit) {\n      const UTF8 = this.radix === -1\n      const radix = !UTF8 ? this.radix : 2;\n      const input = !UTF8 ? this.state.input : this.state.input.join(\" \").split(\" \");\n      \n      this.props.onEdit(radix, input);\n    }\n  }\n\n  addRef(key, element) {\n    this.children[key] = element;\n  }\n\n  render() {\n    return (\n      <Card body className=\"radix-converter\">\n        <CardTitle>\n          <strong>{this.radixName}</strong>\n          {\n            this.description ?\n              <small className=\"text-muted\">{this.description}</small>\n              : undefined\n          }\n          {\n            this.props.onEdit &&\n            <Button size=\"sm\" color=\"secondary\" onClick={this.edit} className=\"edit-button float-right\" href=\"#\">\n              Edit\n            </Button>\n          }\n        </CardTitle>\n        <CardText>{\n          this.state.input.map((digit, key) =>\n            <span\n              className=\"digit\"\n              ref={this.addRef.bind(this, key)}\n              onMouseEnter={this.hover.bind(this, key)}\n              onMouseLeave={this.unhover.bind(this, key)}\n              onClick={this.select.bind(this, key)}\n              key={key}\n            >\n              {\"\" + digit}\n            </span>)\n        }\n        </CardText>\n      </Card>\n    )\n  }\n}\n\nexport default RadixConverter;","import React, { Component, Fragment } from 'react';\nimport {\n  Container, Row, Col,\n  Button, InputGroup, Input,\n  InputGroupAddon, Navbar, NavbarBrand,\n  Card\n} from \"reactstrap\";\nimport './App.css';\nimport RadixConverter from \"./RadixConverter.js\";\nimport memoizeOne from 'memoize-one';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.calculate = this.calculate.bind(this);\n    this.edit = this.edit.bind(this);\n\n    this.state = {\n      string: \"Enter a string here\",\n      stringArr: [],\n      radix: 0\n    };\n  }\n\n\n  edit(radix, digits) {\n    this.setState({\n      radix: radix,\n      string: digits.join(radix === 0 ? \"\" : \" \"),\n    });\n  }\n\n  calculate(string, stringArr) {\n    this.setState({ stringArr: stringArr })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar color=\"dark\" dark>\n          <NavbarBrand href=\"/\">String Tool</NavbarBrand>\n        </Navbar>\n        <Container>\n\n          <Row>\n            <Col>\n              <StringEditor\n                input={this.state.string}\n                radix={this.state.radix}\n                calculate={this.calculate}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <RadixContainer\n              input={this.state.stringArr}\n              onEdit={this.edit}\n              bases={[0, 10, 16, 8, 2, -1]}\n            />\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nclass StringEditor extends Component {\n  // This acts as an \"uncontrolled\" component.\n  // Does not send any changes up to the parent.\n  // And the parent does not control its contents.\n  // When the parent changes its props, this component accepts the changes.\n  // But does not attempt to keep its contents in sync with the parent, for performance reasons.\n  constructor(props) {\n    super(props);\n\n    this.changeHandler = this.changeHandler.bind(this);\n    this.convert = this.convert.bind(this);\n\n    this.calculate = props.calculate;\n    this.state = {\n      string: props.input || \"\",\n      radix: props.radix || 0,\n      delimeter: props.radix > 0 ? \" \" : \"\",\n      regex: false\n    };\n    this.updateRadix = memoizeOne(radix => this.setState({ radix: radix, delimeter: radix > 0 ? \" \" : \"\" }));\n    this.updateString = memoizeOne(string => this.setState({ string: string }));\n    this.getDelimeterEditor = memoizeOne(this.getDelimeterEditor) // wrap in memoizeOne to prevent expensive re-rendering\n  }\n  componentDidMount() {\n    this.convert();\n  }\n\n  componentWillReceiveProps(nextProps, prevProps) {\n    this.updateRadix(nextProps.radix);\n    this.updateString(nextProps.input);\n  }\n\n  changeHandler(event) {\n    let state = {};\n\n    if (event.target.name === \"inputStr\") {\n      state.string = event.target.value;\n    } else if (event.target.id === \"type\") {\n      state.radix = ~~event.target.value;\n      state.delimeter = state.radix > 0 ? \" \" : \"\";\n    } else if (event.target.name === \"delimeter\") {\n      state.delimeter = event.target.value;\n    }\n\n    this.setState(state);\n  }\n\n  convert() {\n    const delimeter = this.state.regex ? new RegExp(this.state.delimeter) : this.state.delimeter;\n\n    this.calculate(this.state.string, this.state.string.split(delimeter).map(char => {\n      if (this.state.radix === 0)\n        return char.charCodeAt(0)\n      else\n        return RadixConverter.convertBase(char, this.state.radix, 10)\n    })\n    )\n  }\n\n  selectAll(event) {\n    event.target.selectionStart = 0;\n    event.target.selectionEnd = event.target.value.length;\n  }\n\n  getDelimeterEditor(radix, delimeter, regex) {\n    if (radix > 0) {\n      let delimeterDisplay;\n\n      if (delimeter.length) {\n        let delimeterText;\n        if (regex) {\n          delimeterText = \"/\" + delimeter + \"/g\";\n        } else {\n          delimeterText = delimeter.split(\"\")\n            .map(char => \"0x\" + RadixConverter.convertBase(char.charCodeAt(0), 10, 16))\n            .join(\" \")\n        }\n        delimeterDisplay = <kbd className=\"delimeter\">{delimeterText}</kbd>;\n      }\n\n      return (<Fragment>\n        <Col lg=\"4\" md=\"5\" className=\"mb-1\">\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">Delimeter</InputGroupAddon>\n            <InputGroupAddon addonType=\"prepend\">\n              <Button color=\"secondary\" outline active={regex} onClick={() => {\n                this.setState({ regex: !regex });\n              }}>\n                Regex\n              </Button>\n            </InputGroupAddon>\n            <Input placeholder=\"Delimeter\" name=\"delimeter\" value={delimeter} onChange={this.changeHandler} />\n          </InputGroup>\n        </Col>\n        <Col lg=\"4\" md=\"3\">\n          {delimeterDisplay}\n        </Col>\n      </Fragment>);\n    }\n  }\n\n  render() {\n    return <Card body className=\"text-right\">\n      <Row>\n        <Col lg=\"3\" md=\"4\" className=\"mb-1\">\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">Input Type</InputGroupAddon>\n            <select className=\"form-control\" id=\"type\" onChange={this.changeHandler} value={this.state.radix}>\n              <option value=\"0\">Plaintext</option>\n              <option value=\"10\">Decimal</option>\n              <option value=\"16\">Hex</option>\n              <option value=\"2\">Binary</option>\n              <option value=\"8\">Octal</option>\n            </select>\n          </InputGroup>\n        </Col>\n        {this.getDelimeterEditor(this.state.radix, this.state.delimeter, this.state.regex)}\n      </Row>\n      <Input\n        name=\"inputStr\"\n        type=\"textarea\"\n        value={this.state.string}\n        spellCheck=\"false\"\n        placeholder=\"Enter a string here\"\n        onChange={this.changeHandler}\n        onFocus={this.selectAll}\n        autoFocus=\"true\"\n      />\n      <div>\n        <span className=\"float-left length\">Input length: <strong>{this.state.string.length}</strong></span>\n        <Button className=\"float-right\" color=\"primary\" onClick={this.convert}>Convert</Button>\n      </div>\n    </Card>\n  }\n}\n\nclass RadixContainer extends Component {\n  // Takes the \"push state up\" concept, but rather than\n  // altering the state, we take the update (hover/select)\n  // and push it to its children. The children do not alter their state\n  // they alter their DOM children directly. \n  // This avoids expensive re-rendering due to state change.\n  // Since our changes are CSS-only, we don't lose any functionality.\n\n  constructor(props) {\n    super(props);\n    this.hover = this.hover.bind(this);\n    this.select = this.select.bind(this);\n    this.addRef = this.addRef.bind(this);\n\n    this.onEdit = props.onEdit;\n    this.bases = props.bases;\n    this.instances = [];\n\n    this.state = { stringArr: [] };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.input) {\n      this.setState({ stringArr: nextProps.input })\n    }\n  }\n\n  select(key) {\n    for (let inst of this.instances)\n      inst.setSelect(key);\n\n  }\n\n  hover(key) {\n    for (let inst of this.instances)\n      inst.setHover(key); // send the key to each child\n\n  }\n\n  addRef(inst) {\n    this.instances.push(inst); // add each RadixConverter instance to our array\n  }\n\n  render() {\n    return <Col>\n      {\n        this.bases.map(radix =>\n          <RadixConverter\n            key={radix}\n            radix={radix}\n            ref={this.addRef}\n            input={this.state.stringArr}\n            onSelect={this.select}\n            onHover={this.hover}\n            onEdit={this.onEdit} />)\n      }\n    </Col>\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}